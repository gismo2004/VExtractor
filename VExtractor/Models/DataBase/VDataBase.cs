// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using VExtractor.Helper;

namespace VExtractor.Models.DataBase;

public partial class VDataBase : DbContext
{
    public VDataBase()
    {
    }

    public VDataBase(DbContextOptions<VDataBase> options)
        : base(options)
    {
    }

    public virtual DbSet<EcnApplicationFeature> EcnApplicationFeatures { get; set; }

    public virtual DbSet<EcnApplicationFeatureGroup> EcnApplicationFeatureGroups { get; set; }

    public virtual DbSet<EcnArdataSourceEventDatum> EcnArdataSourceEventData { get; set; }

    public virtual DbSet<EcnArgraph> EcnArgraphs { get; set; }

    public virtual DbSet<EcnArreport> EcnArreports { get; set; }

    public virtual DbSet<EcnArreportGraphLink> EcnArreportGraphLinks { get; set; }

    public virtual DbSet<EcnArreportUserLink> EcnArreportUserLinks { get; set; }

    public virtual DbSet<EcnArtransformation> EcnArtransformations { get; set; }

    public virtual DbSet<EcnArtransformationParameter> EcnArtransformationParameters { get; set; }

    public virtual DbSet<EcnAuthentificationType> EcnAuthentificationTypes { get; set; }

    public virtual DbSet<EcnCompany> EcnCompanies { get; set; }

    public virtual DbSet<EcnConfig> EcnConfigs { get; set; }

    public virtual DbSet<EcnConfirmationHistory> EcnConfirmationHistories { get; set; }

    public virtual DbSet<EcnConnectionType> EcnConnectionTypes { get; set; }

    public virtual DbSet<EcnControlLog> EcnControlLogs { get; set; }

    public virtual DbSet<EcnControlLogDataGroup> EcnControlLogDataGroups { get; set; }

    public virtual DbSet<EcnConverter> EcnConverters { get; set; }

    public virtual DbSet<EcnConverterDeviceTypeLink> EcnConverterDeviceTypeLinks { get; set; }

    public virtual DbSet<EcnCulture> EcnCultures { get; set; }

    public virtual DbSet<EcnDataPoint> EcnDataPoints { get; set; }

    public virtual DbSet<EcnDataPointKey> EcnDataPointKeys { get; set; }

    public virtual DbSet<EcnDataPointNotificationLink> EcnDataPointNotificationLinks { get; set; }

    public virtual DbSet<EcnDataPointTypeEventTypeLink> EcnDataPointTypeEventTypeLinks { get; set; }

    public virtual DbSet<EcnDataPointTypeKey> EcnDataPointTypeKeys { get; set; }

    public virtual DbSet<EcnDatapointType> EcnDatapointTypes { get; set; }

    public virtual DbSet<EcnDevice> EcnDevices { get; set; }

    public virtual DbSet<EcnDeviceCommStatus> EcnDeviceCommStatuses { get; set; }

    public virtual DbSet<EcnDeviceDevicegroupLink> EcnDeviceDevicegroupLinks { get; set; }

    public virtual DbSet<EcnDeviceGroup> EcnDeviceGroups { get; set; }

    public virtual DbSet<EcnDeviceNotificationLink> EcnDeviceNotificationLinks { get; set; }

    public virtual DbSet<EcnDeviceSchedule> EcnDeviceSchedules { get; set; }

    public virtual DbSet<EcnDeviceScheduleLog> EcnDeviceScheduleLogs { get; set; }

    public virtual DbSet<EcnDeviceSoftwareUpdate> EcnDeviceSoftwareUpdates { get; set; }

    public virtual DbSet<EcnDeviceTree> EcnDeviceTrees { get; set; }

    public virtual DbSet<EcnDeviceType> EcnDeviceTypes { get; set; }

    public virtual DbSet<EcnDeviceTypeDataPointTypeLink> EcnDeviceTypeDataPointTypeLinks { get; set; }

    public virtual DbSet<EcnDeviceTypeKey> EcnDeviceTypeKeys { get; set; }

    public virtual DbSet<EcnDeviceTypeNotificationLink> EcnDeviceTypeNotificationLinks { get; set; }

    public virtual DbSet<EcnDisplayCondition> EcnDisplayConditions { get; set; }

    public virtual DbSet<EcnDisplayConditionGroup> EcnDisplayConditionGroups { get; set; }

    public virtual DbSet<EcnEscalation> EcnEscalations { get; set; }

    public virtual DbSet<EcnEscalationLevel> EcnEscalationLevels { get; set; }

    public virtual DbSet<EcnEscalationNotificationLink> EcnEscalationNotificationLinks { get; set; }

    public virtual DbSet<EcnEventGroupMasterDataCache> EcnEventGroupMasterDataCaches { get; set; }

    public virtual DbSet<EcnEventGroupValueCache> EcnEventGroupValueCaches { get; set; }

    public virtual DbSet<EcnEventInstance> EcnEventInstances { get; set; }

    public virtual DbSet<EcnEventInstanceValue> EcnEventInstanceValues { get; set; }

    public virtual DbSet<EcnEventLog> EcnEventLogs { get; set; }

    public virtual DbSet<EcnEventLogCurrentEvent> EcnEventLogCurrentEvents { get; set; }

    public virtual DbSet<EcnEventLogDataGroup> EcnEventLogDataGroups { get; set; }

    public virtual DbSet<EcnEventType> EcnEventTypes { get; set; }

    public virtual DbSet<EcnEventTypeAdditionalInfo> EcnEventTypeAdditionalInfos { get; set; }

    public virtual DbSet<EcnEventTypeEventTypeGroupLink> EcnEventTypeEventTypeGroupLinks { get; set; }

    public virtual DbSet<EcnEventTypeEventValueTypeLink> EcnEventTypeEventValueTypeLinks { get; set; }

    public virtual DbSet<EcnEventTypeGroup> EcnEventTypeGroups { get; set; }

    public virtual DbSet<EcnEventTypeGroupTree> EcnEventTypeGroupTrees { get; set; }

    public virtual DbSet<EcnEventValueType> EcnEventValueTypes { get; set; }

    public virtual DbSet<EcnExport> EcnExports { get; set; }

    public virtual DbSet<EcnExportHistory> EcnExportHistories { get; set; }

    public virtual DbSet<EcnExportRun> EcnExportRuns { get; set; }

    public virtual DbSet<EcnMaintenance> EcnMaintenances { get; set; }

    public virtual DbSet<EcnNotification> EcnNotifications { get; set; }

    public virtual DbSet<EcnNotificationAddress> EcnNotificationAddresses { get; set; }

    public virtual DbSet<EcnNotificationGroup> EcnNotificationGroups { get; set; }

    public virtual DbSet<EcnNotificationHistory> EcnNotificationHistories { get; set; }

    public virtual DbSet<EcnNotificationMediaType> EcnNotificationMediaTypes { get; set; }

    public virtual DbSet<EcnNotificationNotificationGroupLink> EcnNotificationNotificationGroupLinks { get; set; }

    public virtual DbSet<EcnNotificationTime> EcnNotificationTimes { get; set; }

    public virtual DbSet<EcnNotificationType> EcnNotificationTypes { get; set; }

    public virtual DbSet<EcnObject> EcnObjects { get; set; }

    public virtual DbSet<EcnObjectGroup> EcnObjectGroups { get; set; }

    public virtual DbSet<EcnObjectObjectgroupLink> EcnObjectObjectgroupLinks { get; set; }

    public virtual DbSet<EcnPermission> EcnPermissions { get; set; }

    public virtual DbSet<EcnPermissionValue> EcnPermissionValues { get; set; }

    public virtual DbSet<EcnRawDataError> EcnRawDataErrors { get; set; }

    public virtual DbSet<EcnRawDatum> EcnRawData { get; set; }

    public virtual DbSet<EcnReplacement> EcnReplacements { get; set; }

    public virtual DbSet<EcnRoutineCallType> EcnRoutineCallTypes { get; set; }

    public virtual DbSet<EcnStatusType> EcnStatusTypes { get; set; }

    public virtual DbSet<EcnTableExtension> EcnTableExtensions { get; set; }

    public virtual DbSet<EcnTableExtensionValue> EcnTableExtensionValues { get; set; }

    public virtual DbSet<EcnTan> EcnTans { get; set; }

    public virtual DbSet<EcnTextResource> EcnTextResources { get; set; }

    public virtual DbSet<EcnTransactionLog> EcnTransactionLogs { get; set; }

    public virtual DbSet<EcnTranslation> EcnTranslations { get; set; }

    public virtual DbSet<EcnTrendConfig> EcnTrendConfigs { get; set; }

    public virtual DbSet<EcnTrendConfigChannel> EcnTrendConfigChannels { get; set; }

    public virtual DbSet<EcnTrendView> EcnTrendViews { get; set; }

    public virtual DbSet<EcnTrendViewChannel> EcnTrendViewChannels { get; set; }

    public virtual DbSet<EcnUpdateDefinition> EcnUpdateDefinitions { get; set; }

    public virtual DbSet<EcnUser> EcnUsers { get; set; }

    public virtual DbSet<EcnUserGroup> EcnUserGroups { get; set; }

    public virtual DbSet<EcnUserGroupNotificationGroupLink> EcnUserGroupNotificationGroupLinks { get; set; }

    public virtual DbSet<EcnUserNotificationGroupLink> EcnUserNotificationGroupLinks { get; set; }

    public virtual DbSet<EcnUserSessionLog> EcnUserSessionLogs { get; set; }

    public virtual DbSet<EcnUserSetting> EcnUserSettings { get; set; }

    public virtual DbSet<EcnUserUsergroupLink> EcnUserUsergroupLinks { get; set; }

    public virtual DbSet<EcnVersion> EcnVersions { get; set; }

    public virtual DbSet<EcnViewEventTypeGroupHierarchy> EcnViewEventTypeGroupHierarchies { get; set; }

    public virtual DbSet<EcnVisualisationBinary> EcnVisualisationBinaries { get; set; }

    public virtual DbSet<EcnVisualisationDevice> EcnVisualisationDevices { get; set; }

    public virtual DbSet<EcnVwDataPointCurrentEventCurrentControl> EcnVwDataPointCurrentEventCurrentControls { get; set; }

    public virtual DbSet<EcnWeekday> EcnWeekdays { get; set; }

    public virtual DbSet<View1> View1s { get; set; }

    public virtual DbSet<ViewCurrentEvent> ViewCurrentEvents { get; set; }

    public virtual DbSet<ViewDeviceCurrentEvent> ViewDeviceCurrentEvents { get; set; }

    public virtual DbSet<ViewTrendingEvent> ViewTrendingEvents { get; set; }

    public virtual DbSet<VsmCfconnectionLog> VsmCfconnectionLogs { get; set; }

    public virtual DbSet<VsmCodeAccessLevel> VsmCodeAccessLevels { get; set; }

    public virtual DbSet<VsmDatapointTypeExtension> VsmDatapointTypeExtensions { get; set; }

    public virtual DbSet<VsmDatapointTypeGroup> VsmDatapointTypeGroups { get; set; }

    public virtual DbSet<VsmDatapointTypeGroupDatapointTypeLink> VsmDatapointTypeGroupDatapointTypeLinks { get; set; }

    public virtual DbSet<VsmDeviceBrowserImage> VsmDeviceBrowserImages { get; set; }

    public virtual DbSet<VsmDeviceDocument> VsmDeviceDocuments { get; set; }

    public virtual DbSet<VsmDeviceImage> VsmDeviceImages { get; set; }

    public virtual DbSet<VsmDeviceReadDatum> VsmDeviceReadData { get; set; }

    public virtual DbSet<VsmDeviceSchema> VsmDeviceSchemas { get; set; }

    public virtual DbSet<VsmDeviceSchemaEventType> VsmDeviceSchemaEventTypes { get; set; }

    public virtual DbSet<VsmEquipment> VsmEquipments { get; set; }

    public virtual DbSet<VsmEquipmentReference> VsmEquipmentReferences { get; set; }

    public virtual DbSet<VsmEventTypeConversion> VsmEventTypeConversions { get; set; }

    public virtual DbSet<VsmEventTypeExtension> VsmEventTypeExtensions { get; set; }

    public virtual DbSet<VsmEventTypeGroupExtension> VsmEventTypeGroupExtensions { get; set; }

    public virtual DbSet<VsmHydraulicCalibrationConfig> VsmHydraulicCalibrationConfigs { get; set; }

    public virtual DbSet<VsmHydraulicCalibrationMeasurementResult> VsmHydraulicCalibrationMeasurementResults { get; set; }

    public virtual DbSet<VsmHydraulicCalibrationMeasurementResultStatus> VsmHydraulicCalibrationMeasurementResultStatuses { get; set; }

    public virtual DbSet<VsmHydraulicCalibrationRadiatorConfig> VsmHydraulicCalibrationRadiatorConfigs { get; set; }

    public virtual DbSet<VsmHydraulicCalibrationResult> VsmHydraulicCalibrationResults { get; set; }

    public virtual DbSet<VsmHydraulicCalibrationResultValve> VsmHydraulicCalibrationResultValves { get; set; }

    public virtual DbSet<VsmHydraulicCalibrationRoomConfig> VsmHydraulicCalibrationRoomConfigs { get; set; }

    public virtual DbSet<VsmOperationsDiary> VsmOperationsDiaries { get; set; }

    public virtual DbSet<VsmParameterSet> VsmParameterSets { get; set; }

    public virtual DbSet<VsmParameterValue> VsmParameterValues { get; set; }

    public virtual DbSet<VsmRadiator> VsmRadiators { get; set; }

    public virtual DbSet<VsmRadiatorType> VsmRadiatorTypes { get; set; }

    public virtual DbSet<VsmRadiatorValve> VsmRadiatorValves { get; set; }

    public virtual DbSet<VsmRadiatorValveManufacturer> VsmRadiatorValveManufacturers { get; set; }

    public virtual DbSet<VsmShoppingCart> VsmShoppingCarts { get; set; }

    public virtual DbSet<VsmStdeviceSchema> VsmStdeviceSchemas { get; set; }

    public virtual DbSet<VsmStdeviceSchemaEventTypeLink> VsmStdeviceSchemaEventTypeLinks { get; set; }

    public virtual DbSet<VsmStdocument> VsmStdocuments { get; set; }

    public virtual DbSet<VsmStdocumentDatapointTypeLink> VsmStdocumentDatapointTypeLinks { get; set; }

    public virtual DbSet<VsmStproductCatalog> VsmStproductCatalogs { get; set; }

    public virtual DbSet<VsmStsalesOrganisation> VsmStsalesOrganisations { get; set; }

    public virtual DbSet<VsmStsparepart> VsmStspareparts { get; set; }

    public virtual DbSet<VsmStsparepartDetail> VsmStsparepartDetails { get; set; }

    public virtual DbSet<VsmStsparepartList> VsmStsparepartLists { get; set; }

    public virtual DbSet<VsmStuser> VsmStusers { get; set; }

    public virtual DbSet<VsmUserExtension> VsmUserExtensions { get; set; }

    public virtual DbSet<VsmViewDefaultDatum> VsmViewDefaultData { get; set; }

    public virtual DbSet<VsmViewHydraulicCalibrationConfig> VsmViewHydraulicCalibrationConfigs { get; set; }

    public virtual DbSet<VsmViewHydraulicCalibrationEvent> VsmViewHydraulicCalibrationEvents { get; set; }

    public virtual DbSet<VsmViewHydraulicCalibrationHeatingCircuit> VsmViewHydraulicCalibrationHeatingCircuits { get; set; }

    public virtual DbSet<VsmViewHydraulicCalibrationHeatingCircuitType> VsmViewHydraulicCalibrationHeatingCircuitTypes { get; set; }

    public virtual DbSet<VsmViewHydraulicCalibrationResult> VsmViewHydraulicCalibrationResults { get; set; }

    public virtual DbSet<VsmViewVd100defaultDatum> VsmViewVd100defaultData { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        SqlServerDbContextOptionsExtensions.UseSqlServer(optionsBuilder, "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=" + DataHelper.GetDatabaseFilePath() + ";Integrated Security=True;Connect Timeout=30;Encrypt=True", o =>o.UseCompatibilityLevel(120));
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<EcnApplicationFeature>(entity =>
        {
            entity.HasKey(e => new { e.Name, e.CompanyId });

            entity.ToTable("ecnApplicationFeature");

            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DisplayName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnApplicationFeatureGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnApplicationFeatureGroup");

            entity.Property(e => e.DisplayName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnArdataSourceEventDatum>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnARDataSourceEventData");

            entity.Property(e => e.ArgraphId).HasColumnName("ARGraphId");
            entity.Property(e => e.ArtransformationId).HasColumnName("ARTransformationId");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.SeriesType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Line");
            entity.Property(e => e.XaxisDataSourceEventDataId).HasColumnName("XAxisDataSourceEventDataId");
        });

        modelBuilder.Entity<EcnArgraph>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnARGraph");

            entity.Property(e => e.ChartType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Scatter");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.FixedTime).HasDefaultValue(true);
            entity.Property(e => e.Height).HasDefaultValue(480);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Width).HasDefaultValue(640);
        });

        modelBuilder.Entity<EcnArreport>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnARReport");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.Footer)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Header)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextRun).HasColumnType("datetime");
            entity.Property(e => e.RunningSince).HasColumnType("datetime");
            entity.Property(e => e.ScheduleMonthDayToRun).HasDefaultValue(1);
            entity.Property(e => e.ScheduleTime)
                .HasDefaultValue(new DateTime(2024, 1, 7, 12, 0, 0, 0, DateTimeKind.Unspecified))
                .HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnArreportGraphLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.ArreportId, e.ArgraphId });

            entity.ToTable("ecnARReportGraphLink");

            entity.Property(e => e.ArreportId).HasColumnName("ARReportId");
            entity.Property(e => e.ArgraphId).HasColumnName("ARGraphId");
            entity.Property(e => e.PostText).HasColumnType("text");
            entity.Property(e => e.PreText).HasColumnType("text");
        });

        modelBuilder.Entity<EcnArreportUserLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.ArreportId, e.UserId });

            entity.ToTable("ecnARReportUserLink");

            entity.Property(e => e.ArreportId).HasColumnName("ARReportId");
        });

        modelBuilder.Entity<EcnArtransformation>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnARTransformation");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnArtransformationParameter>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnARTransformationParameter");

            entity.Property(e => e.ArtransformationId).HasColumnName("ARTransformationId");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnAuthentificationType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnAuthentificationType");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnCompany>(entity =>
        {
            entity.ToTable("ecnCompany");

            entity.Property(e => e.Assembly)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ConverterName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Css)
                .HasColumnType("text")
                .HasColumnName("CSS");
            entity.Property(e => e.DesignSettingsXml)
                .HasColumnType("text")
                .HasColumnName("DesignSettingsXML");
            entity.Property(e => e.Image1)
                .HasColumnType("image")
                .HasColumnName("image1");
            entity.Property(e => e.Image2)
                .HasColumnType("image")
                .HasColumnName("image2");
            entity.Property(e => e.Image3)
                .HasColumnType("image")
                .HasColumnName("image3");
            entity.Property(e => e.McdfallBackDeviceId).HasColumnName("MCDFallBackDeviceId");
            entity.Property(e => e.McdialogFzgpassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MCDialogFZGPassword");
            entity.Property(e => e.McdialogFzguser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MCDialogFZGUser");
            entity.Property(e => e.McdnotificationEmailSender)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("MCDNotificationEmailSender");
            entity.Property(e => e.McdnotificationFaxSender)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MCDNotificationFaxSender");
            entity.Property(e => e.McdnotificationSmssender)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MCDNotificationSMSSender");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleActionTimeoutMin)
                .HasDefaultValue(20)
                .HasColumnName("ScheduleActionTimeout_min");
            entity.Property(e => e.Smtppassword)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SMTPPassword");
            entity.Property(e => e.SmtprelayServer)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SMTPRelayServer");
            entity.Property(e => e.Smtpuser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SMTPUser");
            entity.Property(e => e.SmtpuserMailingsFromAddress)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SMTPUserMailingsFromAddress");
        });

        modelBuilder.Entity<EcnConfig>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.Name });

            entity.ToTable("ecnConfig");

            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DataType)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Options)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Path)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Value)
                .IsRequired()
                .HasColumnType("ntext");
        });

        modelBuilder.Entity<EcnConfirmationHistory>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnConfirmationHistory");

            entity.Property(e => e.ConfimationAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationTime).HasColumnType("datetime");
            entity.Property(e => e.Message)
                .HasMaxLength(2000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnConnectionType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId }).HasName("PK_ConnectionType");

            entity.ToTable("ecnConnectionType");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnControlLog>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnControlLog");

            entity.Property(e => e.ControlSentTime).HasColumnType("datetime");
            entity.Property(e => e.ControlTime)
                .HasDefaultValue(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                .HasColumnType("datetime");
            entity.Property(e => e.ControlTimePlanned).HasColumnType("datetime");
            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ErrorText)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.EventValueBinary)
                .HasMaxLength(8000)
                .HasColumnName("EventValue_Binary");
            entity.Property(e => e.EventValueBit).HasColumnName("EventValue_Bit");
            entity.Property(e => e.EventValueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EventValue_DateTime");
            entity.Property(e => e.EventValueFloat).HasColumnName("EventValue_Float");
            entity.Property(e => e.EventValueInt).HasColumnName("EventValue_Int");
            entity.Property(e => e.EventValueNtext).HasColumnName("EventValue_NText");
            entity.Property(e => e.EventValueVarChar).HasColumnName("EventValue_VarChar");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnControlLogDataGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId }).HasName("PK_ecnControltLogDataGroup");

            entity.ToTable("ecnControlLogDataGroup");

            entity.Property(e => e.CreateTime)
                .HasDefaultValueSql("((-1))")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnConverter>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnConverter");

            entity.Property(e => e.ConverterAssembly)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ConverterClassName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnConverterDeviceTypeLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceTypeTechnicalIdentificationAddress });

            entity.ToTable("ecnConverterDeviceTypeLink");
        });

        modelBuilder.Entity<EcnCulture>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnCulture");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDataPoint>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDataPoint");

            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InformationDataSetXml)
                .HasColumnType("text")
                .HasColumnName("InformationDataSetXML");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDataPointKey>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDataPointKey");

            entity.Property(e => e.DataPointAddress)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DataPointName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDataPointNotificationLink>(entity =>
        {
            entity.HasKey(e => new { e.NotificationId, e.CompanyId, e.DataPointKeyId, e.DataPointId, e.EventTypeId, e.EventValueTypeId });

            entity.ToTable("ecnDataPointNotificationLink");

            entity.Property(e => e.MatchValue)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDataPointTypeEventTypeLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DataPointTypeId, e.EventTypeId });

            entity.ToTable("ecnDataPointTypeEventTypeLink");
        });

        modelBuilder.Entity<EcnDataPointTypeKey>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDataPointTypeKey");

            entity.Property(e => e.DataPointTypeName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDatapointType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDatapointType");

            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDevice>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDevice");

            entity.Property(e => e.AppLogin)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AppPassword)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConnectionAdress)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ConverterParameter)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CustomerDescription).HasColumnType("text");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.InformationDataSetXml)
                .HasColumnType("text")
                .HasColumnName("InformationDataSetXML");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.McdialogDeviceId).HasColumnName("MCDialogDeviceId");
            entity.Property(e => e.McdialogRoleId).HasColumnName("MCDialogRoleId");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Plz)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PLZ");
            entity.Property(e => e.RoutinecallStartDate).HasColumnType("datetime");
            entity.Property(e => e.Serial)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Tcpport).HasColumnName("TCPPort");
        });

        modelBuilder.Entity<EcnDeviceCommStatus>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId, e.OuId, e.DeviceId });

            entity.ToTable("ecnDeviceCommStatus");
        });

        modelBuilder.Entity<EcnDeviceDevicegroupLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceId, e.DeviceGroupId });

            entity.ToTable("ecnDeviceDevicegroupLink");
        });

        modelBuilder.Entity<EcnDeviceGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDeviceGroup");

            entity.Property(e => e.CustomerDescription).HasColumnType("text");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDeviceNotificationLink>(entity =>
        {
            entity.HasKey(e => new { e.NotificationId, e.CompanyId, e.DeviceId, e.DataPointId, e.EventTypeId, e.EventValueTypeId, e.DataPointKeyId, e.DeviceTypeId, e.DeviceTypeKeyId });

            entity.ToTable("ecnDeviceNotificationLink");

            entity.Property(e => e.MatchValue)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SqlmatchValue)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SQLMatchValue");
        });

        modelBuilder.Entity<EcnDeviceSchedule>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceId, e.ActionTypeId });

            entity.ToTable("ecnDeviceSchedule");

            entity.Property(e => e.InProgress).HasColumnName("inProgress");
            entity.Property(e => e.LastRun).HasColumnType("datetime");
            entity.Property(e => e.NextRun).HasColumnType("datetime");
        });

        modelBuilder.Entity<EcnDeviceScheduleLog>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDeviceScheduleLog");

            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Message).HasColumnType("ntext");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EcnDeviceSoftwareUpdate>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceId });

            entity.ToTable("ecnDeviceSoftwareUpdate");

            entity.Property(e => e.MajorSoftwareVersion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MinorSoftwareVersion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateReadTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateUsingIdentification)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDeviceTree>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDeviceTree");

            entity.Property(e => e.AbsolutePosition)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDeviceType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDeviceType");

            entity.HasIndex(e => new { e.TechnicalIdentificationAddress, e.CompanyId }, "UIX_ecnDeviceType").IsUnique();

            entity.Property(e => e.Manufacturer)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TechnicalIdentificationAddress).HasDefaultValue(-1);
        });

        modelBuilder.Entity<EcnDeviceTypeDataPointTypeLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceTypeId, e.DataPointTypeId });

            entity.ToTable("ecnDeviceTypeDataPointTypeLink");
        });

        modelBuilder.Entity<EcnDeviceTypeKey>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDeviceTypeKey");

            entity.Property(e => e.DataPointAddress)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DataPointName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDeviceTypeNotificationLink>(entity =>
        {
            entity.HasKey(e => new { e.NotificationId, e.CompanyId, e.DeviceTypeId, e.DataPointTypeId, e.EventTypeId, e.EventValueTypeId, e.DataPointTypeKeyId });

            entity.ToTable("ecnDeviceTypeNotificationLink");

            entity.Property(e => e.MatchValue)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SqlmatchValue)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SQLMatchValue");
        });

        modelBuilder.Entity<EcnDisplayCondition>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDisplayCondition");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnDisplayConditionGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnDisplayConditionGroup");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnEscalation>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnEscalation");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnEscalationLevel>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnEscalationLevel");
        });

        modelBuilder.Entity<EcnEscalationNotificationLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.EscalationId, e.NotificationId });

            entity.ToTable("ecnEscalationNotificationLink");
        });

        modelBuilder.Entity<EcnEventGroupMasterDataCache>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceId, e.DataPointId, e.EventTypeGroupId, e.EventTypeId });

            entity.ToTable("ecnEventGroupMasterDataCache");

            entity.Property(e => e.RootEntrance)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Company).WithMany(p => p.EcnEventGroupMasterDataCaches)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventGroupMasterDataCache_ecnCompany");

            entity.HasOne(d => d.EcnDataPoint).WithMany(p => p.EcnEventGroupMasterDataCaches)
                .HasForeignKey(d => new { d.DataPointId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventGroupMasterDataCache_ecnDataPoint");

            entity.HasOne(d => d.EcnDevice).WithMany(p => p.EcnEventGroupMasterDataCaches)
                .HasForeignKey(d => new { d.DeviceId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventGroupMasterDataCache_ecnDevice");

            entity.HasOne(d => d.EcnEventTypeGroup).WithMany(p => p.EcnEventGroupMasterDataCaches)
                .HasForeignKey(d => new { d.EventTypeGroupId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventGroupMasterDataCache_ecnEventTypeGroup");
        });

        modelBuilder.Entity<EcnEventGroupValueCache>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceId, e.DataPointId, e.EventTypeId }).HasName("PK_ecnEventGroupValueCache_1");

            entity.ToTable("ecnEventGroupValueCache");

            entity.Property(e => e.ValueBinary)
                .HasMaxLength(8000)
                .HasColumnName("Value_Binary");
            entity.Property(e => e.ValueBit).HasColumnName("Value_Bit");
            entity.Property(e => e.ValueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("Value_DateTime");
            entity.Property(e => e.ValueEventTime).HasColumnType("datetime");
            entity.Property(e => e.ValueFloat).HasColumnName("Value_Float");
            entity.Property(e => e.ValueInt).HasColumnName("Value_Int");
            entity.Property(e => e.ValueNtext).HasColumnName("Value_Ntext");
            entity.Property(e => e.ValueUnit).HasMaxLength(255);
            entity.Property(e => e.ValueVarChar).HasColumnName("Value_VarChar");

            entity.HasOne(d => d.Company).WithMany(p => p.EcnEventGroupValueCaches)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventGroupValueCache_ecnCompany");

            entity.HasOne(d => d.EcnDataPoint).WithMany(p => p.EcnEventGroupValueCaches)
                .HasForeignKey(d => new { d.DataPointId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventGroupValueCache_ecnDataPoint");

            entity.HasOne(d => d.EcnDevice).WithMany(p => p.EcnEventGroupValueCaches)
                .HasForeignKey(d => new { d.DeviceId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventGroupValueCache_ecnDevice");

            entity.HasOne(d => d.EcnEventValueType).WithMany(p => p.EcnEventGroupValueCaches)
                .HasForeignKey(d => new { d.EventValueTypeId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventGroupValueCache_ecnEventValueType");

            entity.HasOne(d => d.EcnStatusType).WithMany(p => p.EcnEventGroupValueCaches)
                .HasForeignKey(d => new { d.StatusTypeId, d.CompanyId })
                .HasConstraintName("FK_ecnEventGroupValueCache_ecnStatusType");
        });

        modelBuilder.Entity<EcnEventInstance>(entity =>
        {
            entity.ToTable("ecnEventInstance");

            entity.HasIndex(e => new { e.CompanyId, e.DeviceId, e.DatapointId, e.EventTypeId, e.Unit }, "UIX_ecnEventInstance").IsUnique();

            entity.Property(e => e.Unit).HasMaxLength(255);
        });

        modelBuilder.Entity<EcnEventInstanceValue>(entity =>
        {
            entity.HasKey(e => new { e.EventInstanceId, e.EventTime });

            entity.ToTable("ecnEventInstanceValues");

            entity.Property(e => e.EventTime).HasPrecision(2);

            entity.HasOne(d => d.EventInstance).WithMany(p => p.EcnEventInstanceValues)
                .HasForeignKey(d => d.EventInstanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ecnEventInstanceValues_ecnEventInstance");
        });

        modelBuilder.Entity<EcnEventLog>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId }).HasName("PK_ecnEventLog_Current");

            entity.ToTable("ecnEventLog");

            entity.HasIndex(e => new { e.DataPointId, e.CompanyId }, "IDX_DataPointId").HasFillFactor(90);

            entity.HasIndex(e => new { e.DeviceId, e.CompanyId }, "IDX_DeviceId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EventTime, e.CompanyId }, "IDX_EventTime").HasFillFactor(90);

            entity.HasIndex(e => new { e.DeviceId, e.CompanyId, e.EventTime }, "IX_ecnEventLog")
                .IsDescending(false, false, true)
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.CompanyId, e.DeviceId, e.DataPointId, e.EventTypeId, e.EventValueTypeId }, "IX_ecnEventLog_5").HasFillFactor(90);

            entity.HasIndex(e => new { e.CompanyId, e.DeviceId, e.EventTypeId }, "IX_ecnEventLog_6").HasFillFactor(90);

            entity.HasIndex(e => new { e.CompanyId, e.DeviceId, e.DataPointId, e.EventTime }, "IX_ecnEventLog_7").HasFillFactor(90);

            entity.HasIndex(e => new { e.EventTime, e.CompanyId }, "IX_ecnEventTime_DESC")
                .IsDescending(true, false)
                .HasFillFactor(90);

            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventReceivedTime)
                .HasDefaultValue(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                .HasColumnType("datetime");
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventValueBinary)
                .HasMaxLength(8000)
                .HasColumnName("EventValue_Binary");
            entity.Property(e => e.EventValueBit).HasColumnName("EventValue_Bit");
            entity.Property(e => e.EventValueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EventValue_DateTime");
            entity.Property(e => e.EventValueFloat).HasColumnName("EventValue_Float");
            entity.Property(e => e.EventValueInt).HasColumnName("EventValue_Int");
            entity.Property(e => e.EventValueNtext).HasColumnName("EventValue_NText");
            entity.Property(e => e.EventValueVarChar).HasColumnName("EventValue_VarChar");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnEventLogCurrentEvent>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceId, e.DataPointId, e.EventTypeId });

            entity.ToTable("ecnEventLogCurrentEvents");

            entity.Property(e => e.LastChange).HasColumnType("datetime");
            entity.Property(e => e.LastEventReceivedTime)
                .HasDefaultValue(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<EcnEventLogDataGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnEventLogDataGroup");

            entity.Property(e => e.CreateTime)
                .HasDefaultValueSql("((-1))")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnEventType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnEventType");

            entity.HasIndex(e => e.CompanyId, "CompanyIdx");

            entity.HasIndex(e => new { e.CompanyId, e.Address }, "IX_ecnEventType_CompanyId_Address");

            entity.HasIndex(e => new { e.Id, e.CompanyId }, "_dta_index_ecnEventType_23_365244356__K1_K2_3_4_5_6_7_8_9_10_11_12_13");

            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Conversion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.Filtercriterion).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjectId).HasDefaultValue(-1);
            entity.Property(e => e.Reportingcriterion).HasDefaultValue(true);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<EcnEventTypeAdditionalInfo>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.EventTypeId });

            entity.ToTable("ecnEventTypeAdditionalInfo");

            entity.Property(e => e.PicturePath).HasMaxLength(1000);
        });

        modelBuilder.Entity<EcnEventTypeEventTypeGroupLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.EventTypeId, e.EventTypeGroupId });

            entity.ToTable("ecnEventTypeEventTypeGroupLink");
        });

        modelBuilder.Entity<EcnEventTypeEventValueTypeLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.EventTypeId, e.EventValueId });

            entity.ToTable("ecnEventTypeEventValueTypeLink");

            entity.HasIndex(e => new { e.CompanyId, e.EventTypeId }, "_dta_index_ecnEventTypeEventValueTypeLink_23_421576540__K1_K2");
        });

        modelBuilder.Entity<EcnEventTypeGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnEventTypeGroup");

            entity.HasIndex(e => new { e.CompanyId, e.DeviceTypeId, e.DataPointTypeId }, "IX_DatapointTypeGroupIndex");

            entity.HasIndex(e => new { e.CompanyId, e.ParentId }, "IX_ecnEventTypeGroupHierarchy");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjectGroupId).HasDefaultValue(-1);
        });

        modelBuilder.Entity<EcnEventTypeGroupTree>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnEventTypeGroupTree");
        });

        modelBuilder.Entity<EcnEventValueType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnEventValueType");

            entity.HasIndex(e => e.CompanyId, "CompanyIdIdx");

            entity.HasIndex(e => new { e.Id, e.CompanyId }, "_dta_index_ecnEventValueType_23_525244926__K1_K2_3_4_5_6_7_8_9_10_11_12_13_14");

            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EnumReplaceValue)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnExport>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.Date, e.UserId, e.TableName, e.Id, e.Id2 });

            entity.ToTable("ecnExport");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.TableName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<EcnExportHistory>(entity =>
        {
            entity.HasKey(e => new { e.ExportRunId, e.CompanyId, e.TableName, e.IdValue, e.Id2Value });

            entity.ToTable("ecnExportHistory");

            entity.Property(e => e.TableName).HasMaxLength(255);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Id2Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IdName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<EcnExportRun>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnExportRun");

            entity.Property(e => e.Date).HasColumnType("datetime");
        });

        modelBuilder.Entity<EcnMaintenance>(entity =>
        {
            entity.HasKey(e => new { e.Category, e.Type, e.Property, e.CreateDate }).IsClustered(false);

            entity.ToTable("ecnMaintenance");

            entity.Property(e => e.Category).HasMaxLength(64);
            entity.Property(e => e.Type).HasMaxLength(64);
            entity.Property(e => e.Property).HasMaxLength(128);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Value).HasMaxLength(4000);
        });

        modelBuilder.Entity<EcnNotification>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnNotification");

            entity.Property(e => e.ConfirmTimeout).HasDefaultValue(60);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Text)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ToDo)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnNotificationAddress>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnNotificationAddress");

            entity.Property(e => e.TargetAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnNotificationGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnNotificationGroup");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnNotificationHistory>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnNotificationHistory");

            entity.Property(e => e.ConfirmationId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ErrorText)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EscalationId).HasDefaultValue(-1);
            entity.Property(e => e.EscalationLevel).HasDefaultValue(-1);
            entity.Property(e => e.ExecutionTime).HasColumnType("datetime");
            entity.Property(e => e.McdnotificationState)
                .HasDefaultValue(-1)
                .HasColumnName("MCDNotificationState");
            entity.Property(e => e.Message)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.TargetAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Timeout).HasDefaultValue(60);
            entity.Property(e => e.ToDo)
                .HasMaxLength(2000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnNotificationMediaType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnNotificationMediaType");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnNotificationNotificationGroupLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.NotificationId, e.NotificationGroupId });

            entity.ToTable("ecnNotificationNotificationGroupLink");
        });

        modelBuilder.Entity<EcnNotificationTime>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnNotificationTime");

            entity.Property(e => e.EndTime)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WeekDayId)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnNotificationType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnNotificationType");

            entity.Property(e => e.Description)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnObject>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnObject");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnObjectGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnObjectGroup");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnObjectObjectgroupLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.ObjectId, e.ObjectGroupId }).HasName("PK_ecnObjectObjectgroup");

            entity.ToTable("ecnObjectObjectgroupLink");
        });

        modelBuilder.Entity<EcnPermission>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnPermission");

            entity.Property(e => e.CanDelete).HasColumnName("canDelete");
            entity.Property(e => e.CanModify).HasColumnName("canModify");
            entity.Property(e => e.CanRead).HasColumnName("canRead");
            entity.Property(e => e.CanWrite).HasColumnName("canWrite");
        });

        modelBuilder.Entity<EcnPermissionValue>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId }).HasName("PK_ecnPermissonValues");

            entity.ToTable("ecnPermissionValue");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnRawDataError>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnRawDataError");

            entity.HasIndex(e => new { e.Id, e.CompanyId }, "IX_ecnRawDataError").IsUnique();

            entity.Property(e => e.ArrivalTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.DeviceSerial)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.RawData).HasColumnType("image");
        });

        modelBuilder.Entity<EcnRawDatum>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnRawData");

            entity.Property(e => e.ArrivalTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.RawData).HasColumnType("image");
        });

        modelBuilder.Entity<EcnReplacement>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceId, e.DatapointId, e.TableName, e.TablePkfieldName, e.TablePkvalue, e.TableReplacementFieldName }).HasName("PK_Table1");

            entity.ToTable("ecnReplacement");

            entity.Property(e => e.TableName)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.TablePkfieldName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("TablePKFieldName");
            entity.Property(e => e.TablePkvalue)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TablePKValue");
            entity.Property(e => e.TableReplacementFieldName)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ReplacementValue)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnRoutineCallType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnRoutineCallType");

            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnStatusType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnStatusType");

            entity.Property(e => e.Image).HasColumnType("image");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnTableExtension>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnTableExtension");

            entity.HasIndex(e => e.FieldName, "IX_ecnTableExtension_FieldName");

            entity.HasIndex(e => e.TableName, "IX_ecnTableExtension_TableName");

            entity.HasIndex(e => new { e.TableName, e.FieldName }, "IX_ecnTableExtension_TableNameFieldName");

            entity.Property(e => e.FieldName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.InternalDefaultValue).IsRequired();
            entity.Property(e => e.Label).HasMaxLength(100);
            entity.Property(e => e.OptionsValue).IsUnicode(false);
            entity.Property(e => e.PkFields)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<EcnTableExtensionValue>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnTableExtensionValue");

            entity.HasIndex(e => new { e.CompanyId, e.RefId }, "IX_ecnTableExtensionValue_CompanyIdRefId");

            entity.HasIndex(e => new { e.CompanyId, e.RefId, e.PkValue }, "IX_ecnTableExtensionValue_CompanyIdRefIdPkValue");

            entity.Property(e => e.InternalValue).IsRequired();
            entity.Property(e => e.PkValue)
                .IsRequired()
                .HasMaxLength(150);
        });

        modelBuilder.Entity<EcnTan>(entity =>
        {
            entity.HasKey(e => new { e.Name, e.CompanyId });

            entity.ToTable("ecnTAN");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnTextResource>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnTextResource");

            entity.HasIndex(e => e.Label, "IX_ecnTextResource").HasFillFactor(90);

            entity.HasIndex(e => e.Label, "IX_ecnTextResource_1").HasFillFactor(90);

            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Value).HasMaxLength(1000);
        });

        modelBuilder.Entity<EcnTransactionLog>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.Id });

            entity.ToTable("ecnTransactionLog");

            entity.Property(e => e.NewValue).HasColumnType("ntext");
            entity.Property(e => e.OldValue).HasColumnType("ntext");
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Time).HasColumnType("datetime");
        });

        modelBuilder.Entity<EcnTranslation>(entity =>
        {
            entity.HasKey(e => new { e.TargetName, e.Culture });

            entity.ToTable("ecnTranslation");

            entity.Property(e => e.TargetName).HasMaxLength(255);
            entity.Property(e => e.Culture).HasMaxLength(25);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Translation).HasMaxLength(1000);
        });

        modelBuilder.Entity<EcnTrendConfig>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId, e.OuId });

            entity.ToTable("ecnTrendConfig");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StopTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EcnTrendConfigChannel>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId, e.OuId });

            entity.ToTable("ecnTrendConfigChannels");

            entity.Property(e => e.GroupId).HasComment("This fields holds the eventtypegroupID for the configured channel.");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StopTime).HasColumnType("datetime");
            entity.Property(e => e.TrendConfigId).HasComment("This field holds the link to table/field ecnTrendConfig.ID.");
        });

        modelBuilder.Entity<EcnTrendView>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId, e.OuId });

            entity.ToTable("ecnTrendView");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StopTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EcnTrendViewChannel>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId, e.OuId, e.TrendViewId, e.DataPointId, e.EventTypeId });

            entity.ToTable("ecnTrendViewChannels");

            entity.Property(e => e.Id).HasComment("This field holds the link to table/field ecnTrendView.ID.");
        });

        modelBuilder.Entity<EcnUpdateDefinition>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnUpdateDefinition");

            entity.Property(e => e.ConnectionString)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MajorSoftwareVersion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MinorSoftwareVersion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReleaseTime).HasColumnType("datetime");
            entity.Property(e => e.UsingIdentification)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnUser>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnUser");

            entity.Property(e => e.Annotation)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CityCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EMail)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("eMail");
            entity.Property(e => e.Fax)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Mobile)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ObjectId).HasDefaultValue(-1);
            entity.Property(e => e.Password)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Street)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnUserGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnUserGroup");

            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ObjectGroupId).HasDefaultValue(-1);
        });

        modelBuilder.Entity<EcnUserGroupNotificationGroupLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.UserGroupId, e.NotificationGroupId });

            entity.ToTable("ecnUserGroupNotificationGroupLink");
        });

        modelBuilder.Entity<EcnUserNotificationGroupLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.UserId, e.NotificationGroupId });

            entity.ToTable("ecnUserNotificationGroupLink");
        });

        modelBuilder.Entity<EcnUserSessionLog>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnUserSessionLog");

            entity.Property(e => e.Ipaddress)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.LoginTime).HasColumnType("datetime");
            entity.Property(e => e.LogoutTime).HasColumnType("datetime");
            entity.Property(e => e.SessionId)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SessionID");
        });

        modelBuilder.Entity<EcnUserSetting>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnUserSettings");

            entity.HasIndex(e => new { e.CompanyId, e.UserId, e.Name }, "UIX_ecnUserSettings").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Value).IsRequired();
        });

        modelBuilder.Entity<EcnUserUsergroupLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.UserId, e.UserGroupId }).HasName("PK_ecnUserUserGroup");

            entity.ToTable("ecnUserUsergroupLink");
        });

        modelBuilder.Entity<EcnVersion>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId }).HasName("PK_ecnVersion_1");

            entity.ToTable("ecnVersion");

            entity.HasIndex(e => new { e.CompanyId, e.Name }, "UIX_ecnVersion_CompanyId_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnViewEventTypeGroupHierarchy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ecnViewEventTypeGroupHierarchy");

            entity.Property(e => e.Address).IsRequired();
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Path)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.RootAddress).IsRequired();
        });

        modelBuilder.Entity<EcnVisualisationBinary>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId }).HasName("PK_ecnImage");

            entity.ToTable("ecnVisualisationBinary");

            entity.Property(e => e.BinaryData)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.ContentType)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnVisualisationDevice>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId }).HasName("PK_ecnDeviceVisualisation");

            entity.ToTable("ecnVisualisationDevice");
        });

        modelBuilder.Entity<EcnVwDataPointCurrentEventCurrentControl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ecnVwDataPointCurrentEventCurrentControl");

            entity.Property(e => e.ControlLogEventValueBinary).HasMaxLength(8000);
            entity.Property(e => e.ControlLogEventValueDateTime).HasColumnType("datetime");
            entity.Property(e => e.ControlLogEventValueNtext)
                .HasColumnType("ntext")
                .HasColumnName("ControlLogEventValueNText");
            entity.Property(e => e.ControlLogEventValueVarChar)
                .HasMaxLength(4096)
                .IsUnicode(false);
            entity.Property(e => e.ControlLogTime).HasColumnType("datetime");
            entity.Property(e => e.EventLogEventValueBinary).HasMaxLength(8000);
            entity.Property(e => e.EventLogEventValueDateTime).HasColumnType("datetime");
            entity.Property(e => e.EventLogEventValueNtext)
                .HasColumnType("ntext")
                .HasColumnName("EventLogEventValueNText");
            entity.Property(e => e.EventLogEventValueVarChar)
                .HasMaxLength(4096)
                .IsUnicode(false);
            entity.Property(e => e.EventLogTime).HasColumnType("datetime");
            entity.Property(e => e.EventTypeAdress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeConversion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeDefaultValue)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcnWeekday>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("ecnWeekday");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<View1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VIEW1");
        });

        modelBuilder.Entity<ViewCurrentEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCurrentEvents");

            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventReceivedTime).HasColumnType("datetime");
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventValueBinary)
                .HasMaxLength(8000)
                .HasColumnName("EventValue_Binary");
            entity.Property(e => e.EventValueBit).HasColumnName("EventValue_Bit");
            entity.Property(e => e.EventValueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EventValue_DateTime");
            entity.Property(e => e.EventValueFloat).HasColumnName("EventValue_Float");
            entity.Property(e => e.EventValueInt).HasColumnName("EventValue_Int");
            entity.Property(e => e.EventValueNtext)
                .HasColumnType("ntext")
                .HasColumnName("EventValue_NText");
            entity.Property(e => e.EventValueVarChar)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasColumnName("EventValue_VarChar");
            entity.Property(e => e.LastChange).HasColumnType("datetime");
            entity.Property(e => e.LastEventReceivedTime).HasColumnType("datetime");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewDeviceCurrentEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewDeviceCurrentEvents");

            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DatapointAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DatapointDescription)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DatapointName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeviceCustomerDescription).HasColumnType("text");
            entity.Property(e => e.DeviceDescription).HasColumnType("text");
            entity.Property(e => e.DeviceLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeviceName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceSerial)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceStreet)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeviceZipCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EventReceivedTime).HasColumnType("datetime");
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventTypeAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeConversion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeDefaultValue)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EventTypeURL");
            entity.Property(e => e.EventValueBinary)
                .HasMaxLength(8000)
                .HasColumnName("EventValue_Binary");
            entity.Property(e => e.EventValueBit).HasColumnName("EventValue_Bit");
            entity.Property(e => e.EventValueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EventValue_DateTime");
            entity.Property(e => e.EventValueFloat).HasColumnName("EventValue_Float");
            entity.Property(e => e.EventValueInt).HasColumnName("EventValue_Int");
            entity.Property(e => e.EventValueNtext)
                .HasColumnType("ntext")
                .HasColumnName("EventValue_NText");
            entity.Property(e => e.EventValueVarChar)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasColumnName("EventValue_VarChar");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewTrendingEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewTrendingEvents");

            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventReceivedTime).HasColumnType("datetime");
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventValueBinary)
                .HasMaxLength(8000)
                .HasColumnName("EventValue_Binary");
            entity.Property(e => e.EventValueBit).HasColumnName("EventValue_Bit");
            entity.Property(e => e.EventValueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EventValue_DateTime");
            entity.Property(e => e.EventValueFloat).HasColumnName("EventValue_Float");
            entity.Property(e => e.EventValueInt).HasColumnName("EventValue_Int");
            entity.Property(e => e.EventValueNtext)
                .HasColumnType("ntext")
                .HasColumnName("EventValue_NText");
            entity.Property(e => e.EventValueVarChar)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasColumnName("EventValue_VarChar");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StopTime).HasColumnType("datetime");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VsmCfconnectionLog>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmCFConnectionLog");

            entity.Property(e => e.CallbackConnectionAddress).IsRequired();
            entity.Property(e => e.ConnectionStatusText).IsRequired();
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.DirectConnectionAddress).IsRequired();
        });

        modelBuilder.Entity<VsmCodeAccessLevel>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.CompanyId, e.Code });

            entity.ToTable("vsmCodeAccessLevel");

            entity.Property(e => e.Code).HasMaxLength(50);
        });

        modelBuilder.Entity<VsmDatapointTypeExtension>(entity =>
        {
            entity.HasKey(e => new { e.DatapointTypeId, e.CompanyId });

            entity.ToTable("vsmDatapointTypeExtension");

            entity.Property(e => e.Viaready).HasColumnName("VIAReady");

            entity.HasOne(d => d.EcnDatapointType).WithOne(p => p.VsmDatapointTypeExtension)
                .HasForeignKey<VsmDatapointTypeExtension>(d => new { d.DatapointTypeId, d.CompanyId })
                .HasConstraintName("FK_vsmDatapointTypeExtension_ecnDatapointType");
        });

        modelBuilder.Entity<VsmDatapointTypeGroup>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmDatapointTypeGroup");

            entity.HasIndex(e => new { e.CompanyId, e.Address }, "UIX_vsmDatapointTypeGroup_Address").IsUnique();

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<VsmDatapointTypeGroupDatapointTypeLink>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DatapointTypeGroupId, e.DatapointTypeId });

            entity.ToTable("vsmDatapointTypeGroupDatapointTypeLink");

            entity.HasOne(d => d.VsmDatapointTypeGroup).WithMany(p => p.VsmDatapointTypeGroupDatapointTypeLinks)
                .HasForeignKey(d => new { d.DatapointTypeGroupId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmDatapointTypeGroupDatapointTypeLink_vsmDatapointTypeGroup");

            entity.HasOne(d => d.EcnDatapointType).WithMany(p => p.VsmDatapointTypeGroupDatapointTypeLinks)
                .HasForeignKey(d => new { d.DatapointTypeId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmDatapointTypeGroupDatapointTypeLink_ecnDatapointType");
        });

        modelBuilder.Entity<VsmDeviceBrowserImage>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId }).HasName("PK_vsmDeviceImageBrowser");

            entity.ToTable("vsmDeviceBrowserImage");

            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VsmImageId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("vsmImageId");

            entity.HasOne(d => d.Company).WithMany(p => p.VsmDeviceBrowserImages)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_vsmDeviceBrowserImage_ecnCompany");
        });

        modelBuilder.Entity<VsmDeviceDocument>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmDeviceDocument");

            entity.HasIndex(e => new { e.CompanyId, e.DeviceId }, "IX_vsmDeviceDocument_CompanyIdDeviceId");

            entity.HasIndex(e => new { e.CompanyId, e.RefId }, "IX_vsmDeviceDocument_CompanyIdRefId");

            entity.HasIndex(e => new { e.CompanyId, e.UserId }, "IX_vsmDeviceDocument_CompanyIdUserId");

            entity.Property(e => e.FileUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("FileURL");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Remark).HasMaxLength(1024);

            entity.HasOne(d => d.Company).WithMany(p => p.VsmDeviceDocuments)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_vsmDeviceDocument_ecnCompany");

            entity.HasOne(d => d.EcnDevice).WithMany(p => p.VsmDeviceDocuments)
                .HasForeignKey(d => new { d.DeviceId, d.CompanyId })
                .HasConstraintName("FK_vsmDeviceDocument_ecnDevice");
        });

        modelBuilder.Entity<VsmDeviceImage>(entity =>
        {
            entity.HasKey(e => new { e.DeviceId, e.CompanyId });

            entity.ToTable("vsmDeviceImage");

            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("ImageURL");

            entity.HasOne(d => d.Company).WithMany(p => p.VsmDeviceImages)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmDeviceImage_ecnCompany");

            entity.HasOne(d => d.EcnDevice).WithOne(p => p.VsmDeviceImage)
                .HasForeignKey<VsmDeviceImage>(d => new { d.DeviceId, d.CompanyId })
                .HasConstraintName("FK_vsmDeviceImage_vsmDeviceImage");
        });

        modelBuilder.Entity<VsmDeviceReadDatum>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DataPointId });

            entity.ToTable("vsmDeviceReadData");
        });

        modelBuilder.Entity<VsmDeviceSchema>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmDeviceSchema", tb => tb.HasComment("Tabelle für die Anlagenschemen."));

            entity.Property(e => e.Id).HasComment("Id Feld des e-ControlNet aus der TAN Tabelle.");
            entity.Property(e => e.CompanyId).HasComment("CompanyId des Mandanten im e-ControlNet.");
            entity.Property(e => e.DeviceId).HasComment("DeviceId (Viessmann Anlagen Id) des e-ControlNet.");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("ImageURL aus der das Anlagenschema geladen werden kann.")
                .HasColumnName("ImageURL");
            entity.Property(e => e.UpdateCycle).HasComment("Aktualisierungsintervall des Anlagenschemas. Falls 0 (oder kleiner 0) gesetzt ist wird das Anlagenschema nicht aktualisiert.");
        });

        modelBuilder.Entity<VsmDeviceSchemaEventType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmDeviceSchemaEventType", tb => tb.HasComment("Diese Tabelle definiert die Werte, die im Anlagenschema angezeigt werden."));

            entity.Property(e => e.Id).HasComment("Id Feld des e-ControlNet aus der TAN Tabelle.");
            entity.Property(e => e.CompanyId).HasComment("CompanyId des Mandanten im e-ControlNet.");
            entity.Property(e => e.DatapointId).HasComment("DatapointId (Viessmann Regler Id) des e-ControlNet.");
            entity.Property(e => e.DeviceSchemaId).HasComment("Id des zugeordneten Anlagenschemas (vsmDeviceSchema).");
            entity.Property(e => e.EventTypeId).HasComment("EventTypeId (Viessmann Datenpunkt Id) des e-ControlNet.");
            entity.Property(e => e.PosX).HasComment("Die X-Koordinate des Wertes innerhalb des Bildes in Pixeln ausgehend vom linken oberen Rand.");
            entity.Property(e => e.PosY).HasComment("Die Y-Koordinate des Wertes innerhalb des Bildes in Pixeln ausgehend vom linken oberen Rand.");
        });

        modelBuilder.Entity<VsmEquipment>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmEquipment");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PartNumber).HasMaxLength(20);

            entity.HasOne(d => d.EcnDataPoint).WithMany(p => p.VsmEquipments)
                .HasForeignKey(d => new { d.DataPointId, d.CompanyId })
                .HasConstraintName("FK_vsmEquipment_ecnDataPoint");

            entity.HasOne(d => d.EcnDevice).WithMany(p => p.VsmEquipments)
                .HasForeignKey(d => new { d.DeviceId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmEquipment_vsmEquipment");

            entity.HasOne(d => d.VsmEquipmentReference).WithMany(p => p.VsmEquipments)
                .HasForeignKey(d => new { d.EquipmentReferenceId, d.CompanyId })
                .HasConstraintName("FK_vsmEquipment_vsmEquipmentReference");
        });

        modelBuilder.Entity<VsmEquipmentReference>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmEquipmentReference");

            entity.Property(e => e.CodeAddress)
                .IsRequired()
                .HasMaxLength(6);
            entity.Property(e => e.PartNumber).HasMaxLength(20);
            entity.Property(e => e.SwindexFrom)
                .HasMaxLength(4)
                .HasColumnName("SWIndexFrom");
            entity.Property(e => e.SwindexTo)
                .HasMaxLength(4)
                .HasColumnName("SWIndexTo");
            entity.Property(e => e.Value).HasMaxLength(8000);
            entity.Property(e => e.Zeid)
                .IsRequired()
                .HasMaxLength(4)
                .HasColumnName("ZEId");
        });

        modelBuilder.Entity<VsmEventTypeConversion>(entity =>
        {
            entity.HasKey(e => new { e.CompanyId, e.DeviceId, e.DatapointId, e.EventTypeId });

            entity.ToTable("vsmEventTypeConversion");

            entity.Property(e => e.Unit).HasMaxLength(255);

            entity.HasOne(d => d.Company).WithMany(p => p.VsmEventTypeConversions)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_vsmEventTypeConversion_ecnCompany");

            entity.HasOne(d => d.EcnDataPoint).WithMany(p => p.VsmEventTypeConversions)
                .HasForeignKey(d => new { d.DatapointId, d.CompanyId })
                .HasConstraintName("FK_vsmEventTypeConversion_ecnDataPoint");

            entity.HasOne(d => d.EcnDevice).WithMany(p => p.VsmEventTypeConversions)
                .HasForeignKey(d => new { d.DeviceId, d.CompanyId })
                .HasConstraintName("FK_vsmEventTypeConversion_ecnDevice");

            entity.HasOne(d => d.EcnEventType).WithMany(p => p.VsmEventTypeConversions)
                .HasForeignKey(d => new { d.EventTypeId, d.CompanyId })
                .HasConstraintName("FK_vsmEventTypeConversion_ecnEventType");
        });

        modelBuilder.Entity<VsmEventTypeExtension>(entity =>
        {
            entity.HasKey(e => new { e.EventTypeId, e.CompanyId });

            entity.ToTable("vsmEventTypeExtension");

            entity.Property(e => e.Viaaddress)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("VIAAddress");
            entity.Property(e => e.ViaconvertToString).HasColumnName("VIAConvertToString");

            entity.HasOne(d => d.EcnEventType).WithOne(p => p.VsmEventTypeExtension)
                .HasForeignKey<VsmEventTypeExtension>(d => new { d.EventTypeId, d.CompanyId })
                .HasConstraintName("FK_vsmEventTypeExtension_ecnEventType");
        });

        modelBuilder.Entity<VsmEventTypeGroupExtension>(entity =>
        {
            entity.HasKey(e => new { e.EventTypeGroupId, e.CompanyId });

            entity.ToTable("vsmEventTypeGroupExtension");

            entity.HasOne(d => d.EcnEventTypeGroup).WithOne(p => p.VsmEventTypeGroupExtension)
                .HasForeignKey<VsmEventTypeGroupExtension>(d => new { d.EventTypeGroupId, d.CompanyId })
                .HasConstraintName("FK_vsmEventTypeGroupExtension_ecnEventTypeGroup");
        });

        modelBuilder.Entity<VsmHydraulicCalibrationConfig>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmHydraulicCalibrationConfig");

            entity.HasIndex(e => new { e.CompanyId, e.DeviceId, e.DatapointId, e.HeatingCircuitId }, "UIX_vsmHydraulicCalibrationConfig_CompanyId_DeviceId").IsUnique();

            entity.Property(e => e.ClimateZone).HasDefaultValue(-14.0);
            entity.Property(e => e.Niveau).HasDefaultValue(6.0);
            entity.Property(e => e.PartNo).HasMaxLength(150);

            entity.HasOne(d => d.Company).WithMany(p => p.VsmHydraulicCalibrationConfigs)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_vsmHydraulicCalibrationConfig_ecnCompany");

            entity.HasOne(d => d.EcnDevice).WithMany(p => p.VsmHydraulicCalibrationConfigs)
                .HasForeignKey(d => new { d.DeviceId, d.CompanyId })
                .HasConstraintName("FK_vsmHydraulicCalibrationConfig_ecnDevice");
        });

        modelBuilder.Entity<VsmHydraulicCalibrationMeasurementResult>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmHydraulicCalibrationMeasurementResults");

            entity.HasIndex(e => new { e.CompanyId, e.ResultId }, "IX_vsmHydraulicCalibrationMeasurementResults");

            entity.HasIndex(e => new { e.CompanyId, e.ResultId, e.MeasurementNumber }, "UIX_vsmHydraulicCalibrationMeasurementResults_CompanyId_ResultId_MeasurementNumber").IsUnique();

            entity.Property(e => e.DateTime).HasColumnType("datetime");

            entity.HasOne(d => d.VsmHydraulicCalibrationResult).WithMany(p => p.VsmHydraulicCalibrationMeasurementResults)
                .HasForeignKey(d => new { d.ResultId, d.CompanyId })
                .HasConstraintName("FK_vsmHydraulicCalibrationMeasurementResults_vsmHydraulicCalibrationResult");
        });

        modelBuilder.Entity<VsmHydraulicCalibrationMeasurementResultStatus>(entity =>
        {
            entity.HasKey(e => new { e.MeasurementId, e.CompanyId, e.ResultValveId });

            entity.ToTable("vsmHydraulicCalibrationMeasurementResultStatus");

            entity.HasIndex(e => new { e.MeasurementId, e.CompanyId }, "IX_vsmHydraulicCalibrationMeasurementResultStatus_MeasurementId_CompanyId");

            entity.HasOne(d => d.VsmHydraulicCalibrationMeasurementResult).WithMany(p => p.VsmHydraulicCalibrationMeasurementResultStatuses)
                .HasForeignKey(d => new { d.MeasurementId, d.CompanyId })
                .HasConstraintName("FK_vsmHydraulicCalibrationMeasurementResultStatus_vsmHydraulicCalibrationMeasurementResultStatus");

            entity.HasOne(d => d.VsmHydraulicCalibrationResultValve).WithMany(p => p.VsmHydraulicCalibrationMeasurementResultStatuses)
                .HasForeignKey(d => new { d.ResultValveId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmHydraulicCalibrationMeasurementResultStatus_vsmHydraulicCalibrationResultValve");
        });

        modelBuilder.Entity<VsmHydraulicCalibrationRadiatorConfig>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmHydraulicCalibrationRadiatorConfig");

            entity.HasIndex(e => new { e.CompanyId, e.RadiatorId }, "IX_vsmHydraulicCalibrationRadiatorConfig_CompanyId_RadiatorId");

            entity.HasIndex(e => new { e.CompanyId, e.RoomId }, "IX_vsmHydraulicCalibrationRadiatorConfig_CompanyId_RoomId");

            entity.HasIndex(e => new { e.CompanyId, e.ValveId }, "IX_vsmHydraulicCalibrationRadiatorConfig_CompanyId_ValveId");

            entity.HasOne(d => d.VsmRadiator).WithMany(p => p.VsmHydraulicCalibrationRadiatorConfigs)
                .HasForeignKey(d => new { d.RadiatorId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmHydraulicCalibrationRadiatorConfig_vsmRadiator");

            entity.HasOne(d => d.VsmHydraulicCalibrationRoomConfig).WithMany(p => p.VsmHydraulicCalibrationRadiatorConfigs)
                .HasForeignKey(d => new { d.RoomId, d.CompanyId })
                .HasConstraintName("FK_vsmHydraulicCalibrationRadiatorConfig_vsmHydraulicCalibrationRoomConfig");

            entity.HasOne(d => d.VsmRadiatorValve).WithMany(p => p.VsmHydraulicCalibrationRadiatorConfigs)
                .HasForeignKey(d => new { d.ValveId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmHydraulicCalibrationRadiatorConfig_vsmRadiatorValve");
        });

        modelBuilder.Entity<VsmHydraulicCalibrationResult>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmHydraulicCalibrationResult");

            entity.HasIndex(e => new { e.CompanyId, e.ConfigId }, "UIX_vsmHydraulicCalibrationResult").IsUnique();

            entity.HasOne(d => d.VsmHydraulicCalibrationConfig).WithMany(p => p.VsmHydraulicCalibrationResults)
                .HasForeignKey(d => new { d.ConfigId, d.CompanyId })
                .HasConstraintName("FK_vsmHydraulicCalibrationResult_vsmHydraulicCalibrationConfig");
        });

        modelBuilder.Entity<VsmHydraulicCalibrationResultValve>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmHydraulicCalibrationResultValve");

            entity.HasIndex(e => new { e.CompanyId, e.ResultId }, "IX_vsmHydraulicCalibrationResultValve_CompanyId_ResultId");

            entity.HasIndex(e => new { e.RadiatorConfigId, e.CompanyId }, "IX_vsmHydraulicCalibrationResultValve_RadiatorConfigId_CompanyId");

            entity.HasIndex(e => new { e.CompanyId, e.ResultId, e.ValveNumber }, "UIX_vsmHydraulicCalibrationResultValve_CompanyId_ResultId_ValveNumber").IsUnique();

            entity.Property(e => e.DefaultSetting)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.VsmHydraulicCalibrationRadiatorConfig).WithMany(p => p.VsmHydraulicCalibrationResultValves)
                .HasForeignKey(d => new { d.RadiatorConfigId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmHydraulicCalibrationResultValve_vsmHydraulicCalibrationRadiatorConfig");

            entity.HasOne(d => d.VsmHydraulicCalibrationResult).WithMany(p => p.VsmHydraulicCalibrationResultValves)
                .HasForeignKey(d => new { d.ResultId, d.CompanyId })
                .HasConstraintName("FK_vsmHydraulicCalibrationResultValve_vsmHydraulicCalibrationResult");
        });

        modelBuilder.Entity<VsmHydraulicCalibrationRoomConfig>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmHydraulicCalibrationRoomConfig");

            entity.HasIndex(e => new { e.CompanyId, e.ConfigId }, "IX_vsmHydraulicCalibrationRoomConfig_CompanyId_ConfigId");

            entity.HasIndex(e => new { e.CompanyId, e.ConfigId, e.RoomNumber }, "UIX_vsmHydraulicCalibrationRoomConfig_CompanyId_ConfigId_RoomNumber").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.VsmHydraulicCalibrationConfig).WithMany(p => p.VsmHydraulicCalibrationRoomConfigs)
                .HasForeignKey(d => new { d.ConfigId, d.CompanyId })
                .HasConstraintName("FK_vsmHydraulicCalibrationRoomConfig_vsmHydraulicCalibrationConfig");
        });

        modelBuilder.Entity<VsmOperationsDiary>(entity =>
        {
            entity.HasKey(e => e.Guid);

            entity.ToTable("vsmOperationsDiary");

            entity.HasIndex(e => new { e.CompanyId, e.DatapointId }, "IX_vsmOperationsDiary_CompanyId_DatapointId");

            entity.HasIndex(e => new { e.CompanyId, e.DeviceId }, "IX_vsmOperationsDiary_CompanyId_DeviceId");

            entity.HasIndex(e => new { e.CompanyId, e.RelevantFor }, "IX_vsmOperationsDiary_CompanyId_RelevantFor");

            entity.HasIndex(e => new { e.CompanyId, e.Type }, "IX_vsmOperationsDiary_CompanyId_Type");

            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("GUID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(4000);

            entity.HasOne(d => d.EcnDataPoint).WithMany(p => p.VsmOperationsDiaries)
                .HasForeignKey(d => new { d.DatapointId, d.CompanyId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_vsmOperationsDiary_ecnDataPoint");

            entity.HasOne(d => d.EcnDevice).WithMany(p => p.VsmOperationsDiaries)
                .HasForeignKey(d => new { d.DeviceId, d.CompanyId })
                .HasConstraintName("FK_vsmOperationsDiary_ecnDevice");

            entity.HasOne(d => d.EcnUser).WithMany(p => p.VsmOperationsDiaries)
                .HasForeignKey(d => new { d.UserId, d.CompanyId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmOperationsDiary_ecnUser");
        });

        modelBuilder.Entity<VsmParameterSet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ParameterSet");

            entity.ToTable("vsmParameterSet");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<VsmParameterValue>(entity =>
        {
            entity.HasKey(e => new { e.ParameterSetId, e.TypeId }).HasName("PK_ParameterValue");

            entity.ToTable("vsmParameterValue");

            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(4096);

            entity.HasOne(d => d.ParameterSet).WithMany(p => p.VsmParameterValues)
                .HasForeignKey(d => d.ParameterSetId)
                .HasConstraintName("FK_ParameterValue_ParameterSet");
        });

        modelBuilder.Entity<VsmRadiator>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmRadiator");

            entity.HasIndex(e => new { e.CompanyId, e.RadiatorTypeId }, "IX_vsmRadiator_Type");

            entity.HasIndex(e => new { e.CompanyId, e.RadiatorTypeId, e.DimensionX, e.DimensionY, e.DimensionZ }, "UIX_vsmRadiator_CompanyId_Type_X_Y_Z").IsUnique();

            entity.HasOne(d => d.VsmRadiatorType).WithMany(p => p.VsmRadiators)
                .HasForeignKey(d => new { d.RadiatorTypeId, d.CompanyId })
                .HasConstraintName("FK_vsmRadiator_vsmRadiatorType");
        });

        modelBuilder.Entity<VsmRadiatorType>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmRadiatorType");

            entity.HasIndex(e => new { e.CompanyId, e.Name }, "UIX_vsmRadiatorType_CompanyId_Name").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.DimensionXname)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("DimensionXName");
            entity.Property(e => e.DimensionXunit)
                .HasMaxLength(150)
                .HasColumnName("DimensionXUnit");
            entity.Property(e => e.DimensionYname)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("DimensionYName");
            entity.Property(e => e.DimensionYunit)
                .HasMaxLength(150)
                .HasColumnName("DimensionYUnit");
            entity.Property(e => e.DimensionZname)
                .HasMaxLength(150)
                .HasColumnName("DimensionZName");
            entity.Property(e => e.DimensionZunit)
                .HasMaxLength(150)
                .HasColumnName("DimensionZUnit");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);

            entity.HasOne(d => d.Company).WithMany(p => p.VsmRadiatorTypes)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_vsmRadiatorType_ecnCompany");
        });

        modelBuilder.Entity<VsmRadiatorValve>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmRadiatorValve");

            entity.HasIndex(e => new { e.CompanyId, e.ManufacturerId }, "IX_vsmRadiatorValve_CompanyId_ManufacturerId");

            entity.HasIndex(e => new { e.CompanyId, e.ManufacturerId, e.Tganumber }, "UIX_vsmRadiatorValve_CompanyId_ManufacturerId_TGANumber").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Tganumber)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("TGANumber");

            entity.HasOne(d => d.VsmRadiatorValveManufacturer).WithMany(p => p.VsmRadiatorValves)
                .HasForeignKey(d => new { d.ManufacturerId, d.CompanyId })
                .HasConstraintName("FK_vsmRadiatorValve_vsmRadiatorValveManufacturer");
        });

        modelBuilder.Entity<VsmRadiatorValveManufacturer>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmRadiatorValveManufacturer");

            entity.HasIndex(e => new { e.CompanyId, e.Name }, "UIX_vsmRadiatorValveManufacturer_CompanyId_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.Company).WithMany(p => p.VsmRadiatorValveManufacturers)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_vsmRadiatorValveManufacturer_ecnCompany");
        });

        modelBuilder.Entity<VsmShoppingCart>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.CompanyId });

            entity.ToTable("vsmShoppingCart");

            entity.HasIndex(e => new { e.CompanyId, e.DeviceId }, "IX_vsmShoppingCart_CompanyIdDeviceId");

            entity.HasIndex(e => new { e.CompanyId, e.MaterialNumber }, "IX_vsmShoppingCart_CompanyIdMaterialNumber");

            entity.Property(e => e.MaterialNumber).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(40);
            entity.Property(e => e.PosMaterialNumber)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.QuantityUnit).HasMaxLength(20);
            entity.Property(e => e.Remark).HasMaxLength(4000);

            entity.HasOne(d => d.Company).WithMany(p => p.VsmShoppingCarts)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_vsmShoppingCart_ecnCompany");

            entity.HasOne(d => d.EcnDataPoint).WithMany(p => p.VsmShoppingCarts)
                .HasForeignKey(d => new { d.DatapointId, d.CompanyId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_vsmShoppingCart_ecnDataPoint");

            entity.HasOne(d => d.EcnDevice).WithMany(p => p.VsmShoppingCarts)
                .HasForeignKey(d => new { d.DeviceId, d.CompanyId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_vsmShoppingCart_ecnDevice");
        });

        modelBuilder.Entity<VsmStdeviceSchema>(entity =>
        {
            entity.ToTable("vsmSTDeviceSchema");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("ImageURL");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<VsmStdeviceSchemaEventTypeLink>(entity =>
        {
            entity.HasKey(e => new { e.DeviceSchemaId, e.Pos });

            entity.ToTable("vsmSTDeviceSchemaEventTypeLink");

            entity.Property(e => e.DatapointTypeAddress)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.EventTypeAddress)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.DeviceSchema).WithMany(p => p.VsmStdeviceSchemaEventTypeLinks)
                .HasForeignKey(d => d.DeviceSchemaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmSTDeviceSchema_vsmSTDeviceSchemaEventTypeLink");
        });

        modelBuilder.Entity<VsmStdocument>(entity =>
        {
            entity.ToTable("vsmSTDocument");

            entity.HasIndex(e => e.DocumentType, "IX_vsmSTDocument_DocumentType");

            entity.HasIndex(e => new { e.DocumentMimeType, e.Status }, "IX_vsmSTDocument_MimeType_Status");

            entity.HasIndex(e => e.Name, "IX_vsmSTDocument_Name");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DocumentMimeType)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.LanguageIsocode)
                .IsRequired()
                .HasMaxLength(2)
                .HasColumnName("LanguageISOCode");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PrintNumber)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<VsmStdocumentDatapointTypeLink>(entity =>
        {
            entity.HasKey(e => new { e.DocumentId, e.MaterialNumber });

            entity.ToTable("vsmSTDocumentDatapointTypeLink");

            entity.HasIndex(e => e.MaterialNumber, "IX_vsmSTDocumentDatapointTypeLink_MaterialNumber");

            entity.Property(e => e.MaterialNumber).HasMaxLength(100);
            entity.Property(e => e.DatapointTypeAddress)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Document).WithMany(p => p.VsmStdocumentDatapointTypeLinks)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmSTDocument_vsmSTDocumentDatapointTypeLink");
        });

        modelBuilder.Entity<VsmStproductCatalog>(entity =>
        {
            entity.HasKey(e => new { e.MaterialNumber, e.SalesOrganisationId });

            entity.ToTable("vsmSTProductCatalog");

            entity.HasIndex(e => e.SalesOrganisationId, "IX_vsmSTProductCatalog_SalesOrganisationId");

            entity.Property(e => e.MaterialNumber).HasMaxLength(100);
            entity.Property(e => e.SalesOrganisationId).HasColumnName("SalesOrganisationID");

            entity.HasOne(d => d.SalesOrganisation).WithMany(p => p.VsmStproductCatalogs)
                .HasForeignKey(d => d.SalesOrganisationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmSTProductCatalog_vsmSTSalesOrganisation");
        });

        modelBuilder.Entity<VsmStsalesOrganisation>(entity =>
        {
            entity.ToTable("vsmSTSalesOrganisation");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.IsRelevant).HasColumnName("isRelevant");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.VkOrg)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<VsmStsparepart>(entity =>
        {
            entity.ToTable("vsmSTSparepart");

            entity.HasIndex(e => new { e.MaterialNumber, e.PosMaterialNumber }, "IX_vsmSTSparepart_MaterialNumber_PosMaterialNumber");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.MaterialNumber)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PosMaterialNumber)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PositionId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuantityUnit).HasMaxLength(20);
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");

            entity.HasOne(d => d.SalesOrganisation).WithMany(p => p.VsmStspareparts)
                .HasForeignKey(d => d.SalesOrganisationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmSTSparepart_vsmSTSalesOrganisation");
        });

        modelBuilder.Entity<VsmStsparepartDetail>(entity =>
        {
            entity.HasKey(e => new { e.LanguageIsocode, e.MaterialNumber });

            entity.ToTable("vsmSTSparepartDetail");

            entity.Property(e => e.LanguageIsocode)
                .HasMaxLength(2)
                .HasColumnName("LanguageISOCode");
            entity.Property(e => e.MaterialNumber).HasMaxLength(100);
            entity.Property(e => e.CatalogText)
                .IsRequired()
                .HasMaxLength(2048);
            entity.Property(e => e.MaterialGroup)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.MaterialShortText)
                .IsRequired()
                .HasMaxLength(2048);
            entity.Property(e => e.MaterialType)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.TranslationText)
                .IsRequired()
                .HasMaxLength(2048);
        });

        modelBuilder.Entity<VsmStsparepartList>(entity =>
        {
            entity.ToTable("vsmSTSparepartList");

            entity.HasIndex(e => e.MaterialNumber, "IX_vsmSTSparepartList_MaterialNumber");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DatapointTypeAddress)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("ImageURL");
            entity.Property(e => e.MaterialNumber)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.SalesOrganisation).WithMany(p => p.VsmStsparepartLists)
                .HasForeignKey(d => d.SalesOrganisationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vsmSTSparepartList_vsmSTSalesOrganisation");
        });

        modelBuilder.Entity<VsmStuser>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("vsmSTUsers");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UserEmail)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<VsmUserExtension>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.CompanyId }).HasName("PK_vsmUserExtensions");

            entity.ToTable("vsmUserExtension");

            entity.Property(e => e.LastReleaeNotesNotifiedDate).HasColumnType("datetime");

            entity.HasOne(d => d.EcnUser).WithOne(p => p.VsmUserExtension)
                .HasForeignKey<VsmUserExtension>(d => new { d.UserId, d.CompanyId })
                .HasConstraintName("FK_vsmUserExtension_ecnUser");
        });

        modelBuilder.Entity<VsmViewDefaultDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vsmViewDefaultData");

            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EnumReplaceValue)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeConversion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeDefaultValue)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupAddress).IsRequired();
            entity.Property(e => e.EventTypeGroupDescription).IsRequired();
            entity.Property(e => e.EventTypeGroupName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupPath)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.EventTypeGroupRootAddress).IsRequired();
            entity.Property(e => e.EventTypeName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventValueTypeName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RootAddress).IsRequired();
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<VsmViewHydraulicCalibrationConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vsmViewHydraulicCalibrationConfig");

            entity.Property(e => e.PartNo).HasMaxLength(150);
            entity.Property(e => e.RadiatorDimensionXname)
                .HasMaxLength(150)
                .HasColumnName("RadiatorDimensionXName");
            entity.Property(e => e.RadiatorDimensionXunit)
                .HasMaxLength(150)
                .HasColumnName("RadiatorDimensionXUnit");
            entity.Property(e => e.RadiatorDimensionYname)
                .HasMaxLength(150)
                .HasColumnName("RadiatorDimensionYName");
            entity.Property(e => e.RadiatorDimensionYunit)
                .HasMaxLength(150)
                .HasColumnName("RadiatorDimensionYUnit");
            entity.Property(e => e.RadiatorDimensionZname)
                .HasMaxLength(150)
                .HasColumnName("RadiatorDimensionZName");
            entity.Property(e => e.RadiatorDimensionZunit)
                .HasMaxLength(150)
                .HasColumnName("RadiatorDimensionZUnit");
            entity.Property(e => e.RadiatorTypeDescription).HasMaxLength(1000);
            entity.Property(e => e.RadiatorTypeName).HasMaxLength(150);
            entity.Property(e => e.RoomName)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<VsmViewHydraulicCalibrationEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vsmViewHydraulicCalibrationEvents");

            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventReceivedTime).HasColumnType("datetime");
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventTypeAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventValueBinary)
                .HasMaxLength(8000)
                .HasColumnName("EventValue_Binary");
            entity.Property(e => e.EventValueBit).HasColumnName("EventValue_Bit");
            entity.Property(e => e.EventValueDateTime)
                .HasColumnType("datetime")
                .HasColumnName("EventValue_DateTime");
            entity.Property(e => e.EventValueFloat).HasColumnName("EventValue_Float");
            entity.Property(e => e.EventValueInt).HasColumnName("EventValue_Int");
            entity.Property(e => e.EventValueNtext)
                .HasColumnType("ntext")
                .HasColumnName("EventValue_NText");
            entity.Property(e => e.EventValueVarChar)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasColumnName("EventValue_VarChar");
            entity.Property(e => e.LastChange).HasColumnType("datetime");
            entity.Property(e => e.LastEventReceivedTime).HasColumnType("datetime");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VsmViewHydraulicCalibrationHeatingCircuit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vsmViewHydraulicCalibrationHeatingCircuits");

            entity.Property(e => e.DatapointTypeAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupAddress).IsRequired();
            entity.Property(e => e.EventTypeGroupName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupPath)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.LogicalMapping).IsRequired();
            entity.Property(e => e.NameReplacement)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VsmViewHydraulicCalibrationHeatingCircuitType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vsmViewHydraulicCalibrationHeatingCircuitTypes");

            entity.Property(e => e.DatapointTypeAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupAddress).IsRequired();
            entity.Property(e => e.EventTypeGroupName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupPath)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.LogicalMapping).IsRequired();
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<VsmViewHydraulicCalibrationResult>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vsmViewHydraulicCalibrationResults");

            entity.Property(e => e.MeasurementDateTime).HasColumnType("datetime");
            entity.Property(e => e.PartNo).HasMaxLength(150);
            entity.Property(e => e.RoomName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ValveDefaultSetting)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<VsmViewVd100defaultDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vsmViewVD100DefaultData");

            entity.Property(e => e.DataType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EnumReplaceValue)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeConversion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeDefaultValue)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupAddress).IsRequired();
            entity.Property(e => e.EventTypeGroupDescription).IsRequired();
            entity.Property(e => e.EventTypeGroupName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventTypeGroupPath)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.EventTypeGroupRootAddress).IsRequired();
            entity.Property(e => e.EventTypeName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EventValueTypeName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsVd100eventType).HasColumnName("IsVD100EventType");
            entity.Property(e => e.IsVd100group).HasColumnName("IsVD100Group");
            entity.Property(e => e.RootAddress).IsRequired();
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("URL");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}