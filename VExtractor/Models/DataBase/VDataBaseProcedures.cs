// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using VExtractor.Models.DataBase;

namespace VExtractor.Models.DataBase
{
    public partial class VDataBase
    {
        private IVDataBaseProcedures _procedures;

        public virtual IVDataBaseProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new VDataBaseProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IVDataBaseProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ConstrainManagementResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ecn_EnableDisable_Foreign_KeysResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ecn_Move_UserDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ecnsp_addTextResourceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ecnsp_CreateIndexesInEventLogTemplateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ecnsp_CreatePartTablesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ecnsp_InsertToPartTablesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getConverterInformationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getStatusForCompanyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getStatusForDataPointResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getStatusForDeviceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getTANResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getTANsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_vsmST_CleanupTablesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_vsmST_CreateTablesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_vsmST_DropTablesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_vsmUpdateSalesOrgAndCultureResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<WriteControlLogResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<WriteEventLogResult>().HasNoKey().ToView(null);
        }
    }

    public partial class VDataBaseProcedures : IVDataBaseProcedures
    {
        private readonly VDataBase _context;

        public VDataBaseProcedures(VDataBase context)
        {
            _context = context;
        }

        public virtual async Task<int> cleanupEventLogAsync(byte? CompanyId, int? DeviceId, int? DatapointId, int? EventTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeviceId",
                    Value = DeviceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DatapointId",
                    Value = DatapointId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[cleanupEventLog] @CompanyId, @DeviceId, @DatapointId, @EventTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ConstrainManagementResult>> ConstrainManagementAsync(long? type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ConstrainManagementResult>("EXEC @returnValue = [dbo].[ConstrainManagement] @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteDevicePhysicalAsync(byte? CompanyId, int? DeviceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeviceId",
                    Value = DeviceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteDevicePhysical] @CompanyId, @DeviceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ecn_Clear_ExportTables_WithDeleteAsync(int? TableExtensionValueLimit, int? EventType, int? EventTypeGroup, byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableExtensionValueLimit",
                    Value = TableExtensionValueLimit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeGroup",
                    Value = EventTypeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ecn_Clear_ExportTables_WithDelete] @TableExtensionValueLimit, @EventType, @EventTypeGroup, @CompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ecn_Clear_ExportTables_WithTruncateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ecn_Clear_ExportTables_WithTruncate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ecn_EnableDisable_Foreign_KeysResult>> ecn_EnableDisable_Foreign_KeysAsync(bool? enableKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "enableKey",
                    Value = enableKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ecn_EnableDisable_Foreign_KeysResult>("EXEC @returnValue = [dbo].[ecn_EnableDisable_Foreign_Keys] @enableKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ecn_Move_UserDataResult>> ecn_Move_UserDataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ecn_Move_UserDataResult>("EXEC @returnValue = [dbo].[ecn_Move_UserData]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ecnsp_addTextResourceResult>> ecnsp_addTextResourceAsync(byte? CompanyId, int? CultureId, string Label, string Value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CultureId",
                    Value = CultureId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Label",
                    Size = 255,
                    Value = Label ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Value",
                    Size = 1000,
                    Value = Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ecnsp_addTextResourceResult>("EXEC @returnValue = [dbo].[ecnsp_addTextResource] @CompanyId, @CultureId, @Label, @Value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ecnsp_ClearExportTablesAsync(int? TableExtensionValueLimit, int? EventType, int? EventTypeGroup, byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableExtensionValueLimit",
                    Value = TableExtensionValueLimit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeGroup",
                    Value = EventTypeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ecnsp_ClearExportTables] @TableExtensionValueLimit, @EventType, @EventTypeGroup, @CompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ecnsp_CreateEventLogTemplateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ecnsp_CreateEventLogTemplate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ecnsp_CreateIndexesInEventLogTemplateResult>> ecnsp_CreateIndexesInEventLogTemplateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ecnsp_CreateIndexesInEventLogTemplateResult>("EXEC @returnValue = [dbo].[ecnsp_CreateIndexesInEventLogTemplate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ecnsp_CreatePartTablesResult>> ecnsp_CreatePartTablesAsync(string Interval, byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Interval",
                    Size = 10,
                    Value = Interval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ecnsp_CreatePartTablesResult>("EXEC @returnValue = [dbo].[ecnsp_CreatePartTables] @Interval, @CompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ecnsp_InsertToPartTablesResult>> ecnsp_InsertToPartTablesAsync(byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ecnsp_InsertToPartTablesResult>("EXEC @returnValue = [dbo].[ecnsp_InsertToPartTables] @CompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ecnsp_RenameEventLogTemplateAsync(string Suffix, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Suffix",
                    Size = 17,
                    Value = Suffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ecnsp_RenameEventLogTemplate] @Suffix", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getConverterInformationResult>> getConverterInformationAsync(int? DeviceId, string DPAddress, string EventAddress, int? EnumAddressValue, byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DeviceId",
                    Value = DeviceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DPAddress",
                    Size = 255,
                    Value = DPAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventAddress",
                    Size = 255,
                    Value = EventAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EnumAddressValue",
                    Value = EnumAddressValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getConverterInformationResult>("EXEC @returnValue = [dbo].[getConverterInformation] @DeviceId, @DPAddress, @EventAddress, @EnumAddressValue, @CompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getStatusForCompanyResult>> getStatusForCompanyAsync(long? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getStatusForCompanyResult>("EXEC @returnValue = [dbo].[getStatusForCompany] @CompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getStatusForDataPointResult>> getStatusForDataPointAsync(long? CompanyId, long? DataPointId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DataPointId",
                    Value = DataPointId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getStatusForDataPointResult>("EXEC @returnValue = [dbo].[getStatusForDataPoint] @CompanyId, @DataPointId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getStatusForDeviceResult>> getStatusForDeviceAsync(long? CompanyId, long? DeviceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeviceId",
                    Value = DeviceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getStatusForDeviceResult>("EXEC @returnValue = [dbo].[getStatusForDevice] @CompanyId, @DeviceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getTANResult>> getTANAsync(string Name, long? CompanyId, OutputParameter<long?> NewId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNewId = new SqlParameter
            {
                ParameterName = "NewId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NewId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 255,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterNewId,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getTANResult>("EXEC @returnValue = [dbo].[getTAN] @Name, @CompanyId, @NewId OUTPUT", sqlParameters, cancellationToken);

            NewId.SetValue(parameterNewId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getTANsResult>> getTANsAsync(string Name, long? CompanyId, int? Counter, OutputParameter<long?> NewId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNewId = new SqlParameter
            {
                ParameterName = "NewId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NewId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 255,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Counter",
                    Value = Counter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterNewId,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getTANsResult>("EXEC @returnValue = [dbo].[getTANs] @Name, @CompanyId, @Counter, @NewId OUTPUT", sqlParameters, cancellationToken);

            NewId.SetValue(parameterNewId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_vsmST_CleanupTablesResult>> sp_vsmST_CleanupTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_vsmST_CleanupTablesResult>("EXEC @returnValue = [dbo].[sp_vsmST_CleanupTables]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_vsmST_CreateTablesResult>> sp_vsmST_CreateTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_vsmST_CreateTablesResult>("EXEC @returnValue = [dbo].[sp_vsmST_CreateTables]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_vsmST_DropTablesResult>> sp_vsmST_DropTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_vsmST_DropTablesResult>("EXEC @returnValue = [dbo].[sp_vsmST_DropTables]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_vsmUpdateSalesOrgAndCultureResult>> sp_vsmUpdateSalesOrgAndCultureAsync(byte? CompanyId, int? UserId, string VkOrg, int? CultureId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VkOrg",
                    Size = 510,
                    Value = VkOrg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CultureId",
                    Value = CultureId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_vsmUpdateSalesOrgAndCultureResult>("EXEC @returnValue = [dbo].[sp_vsmUpdateSalesOrgAndCulture] @CompanyId, @UserId, @VkOrg, @CultureId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WriteControlLogResult>> WriteControlLogAsync(long? Id, byte? CompanyId, int? EventTypeId, int? EventValueTypeId, double? EventValue_Float, int? EventValue_Int, string EventValue_VarChar, string EventValue_NText, bool? EventValue_Bit, byte[] EventValue_Binary, DateTime? EventValue_DateTime, string Unit, string DataType, int? DeviceId, int? DataPointId, int? ControlPriority, int? StatusTypeId, DateTime? ControlTimePlanned, long? ControlLogDataGroupId, int? SendingState, int? UserIdCreated, int? UserIdModified, DateTime? ControlSentTime, string ErrorText, OutputParameter<long?> NewControlLogId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNewControlLogId = new SqlParameter
            {
                ParameterName = "NewControlLogId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NewControlLogId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventValueTypeId",
                    Value = EventValueTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_Float",
                    Value = EventValue_Float ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_Int",
                    Value = EventValue_Int ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_VarChar",
                    Size = 4096,
                    Value = EventValue_VarChar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_NText",
                    Value = EventValue_NText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_Bit",
                    Value = EventValue_Bit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_Binary",
                    Size = 8000,
                    Value = EventValue_Binary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_DateTime",
                    Value = EventValue_DateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Unit",
                    Size = 255,
                    Value = Unit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataType",
                    Size = 255,
                    Value = DataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DeviceId",
                    Value = DeviceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DataPointId",
                    Value = DataPointId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ControlPriority",
                    Value = ControlPriority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StatusTypeId",
                    Value = StatusTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ControlTimePlanned",
                    Value = ControlTimePlanned ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ControlLogDataGroupId",
                    Value = ControlLogDataGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SendingState",
                    Value = SendingState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserIdCreated",
                    Value = UserIdCreated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserIdModified",
                    Value = UserIdModified ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ControlSentTime",
                    Value = ControlSentTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorText",
                    Size = 8000,
                    Value = ErrorText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterNewControlLogId,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WriteControlLogResult>("EXEC @returnValue = [dbo].[WriteControlLog] @Id, @CompanyId, @EventTypeId, @EventValueTypeId, @EventValue_Float, @EventValue_Int, @EventValue_VarChar, @EventValue_NText, @EventValue_Bit, @EventValue_Binary, @EventValue_DateTime, @Unit, @DataType, @DeviceId, @DataPointId, @ControlPriority, @StatusTypeId, @ControlTimePlanned, @ControlLogDataGroupId, @SendingState, @UserIdCreated, @UserIdModified, @ControlSentTime, @ErrorText, @NewControlLogId OUTPUT", sqlParameters, cancellationToken);

            NewControlLogId.SetValue(parameterNewControlLogId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WriteEventLogResult>> WriteEventLogAsync(byte? CompanyId, int? EventTypeId, int? EventValueTypeId, double? EventValue_Float, int? EventValue_Int, string EventValue_VarChar, string EventValue_NText, bool? EventValue_Bit, byte[] EventValue_Binary, DateTime? EventValue_DateTime, string Unit, string DataType, int? DeviceId, int? DataPointId, DateTime? EventTime, int? EventPriority, int? StatusTypeId, long? EventLogDataGroupId, OutputParameter<long?> NewEventLogId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNewEventLogId = new SqlParameter
            {
                ParameterName = "NewEventLogId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NewEventLogId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventValueTypeId",
                    Value = EventValueTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_Float",
                    Value = EventValue_Float ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_Int",
                    Value = EventValue_Int ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_VarChar",
                    Size = 4096,
                    Value = EventValue_VarChar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_NText",
                    Value = EventValue_NText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_Bit",
                    Value = EventValue_Bit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_Binary",
                    Size = 8000,
                    Value = EventValue_Binary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "EventValue_DateTime",
                    Value = EventValue_DateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Unit",
                    Size = 255,
                    Value = Unit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataType",
                    Size = 255,
                    Value = DataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DeviceId",
                    Value = DeviceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DataPointId",
                    Value = DataPointId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EventPriority",
                    Value = EventPriority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StatusTypeId",
                    Value = StatusTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventLogDataGroupId",
                    Value = EventLogDataGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterNewEventLogId,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WriteEventLogResult>("EXEC @returnValue = [dbo].[WriteEventLog] @CompanyId, @EventTypeId, @EventValueTypeId, @EventValue_Float, @EventValue_Int, @EventValue_VarChar, @EventValue_NText, @EventValue_Bit, @EventValue_Binary, @EventValue_DateTime, @Unit, @DataType, @DeviceId, @DataPointId, @EventTime, @EventPriority, @StatusTypeId, @EventLogDataGroupId, @NewEventLogId OUTPUT", sqlParameters, cancellationToken);

            NewEventLogId.SetValue(parameterNewEventLogId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> WriteEventLogCurrentEventAsync(byte? CompanyId, int? EventTypeId, int? EventLogId, int? DeviceId, int? DataPointId, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventLogId",
                    Value = EventLogId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DeviceId",
                    Value = DeviceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DataPointId",
                    Value = DataPointId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[WriteEventLogCurrentEvent] @CompanyId, @EventTypeId, @EventLogId, @DeviceId, @DataPointId, @EventTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
