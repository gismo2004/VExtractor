// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using VExtractor.Models.DataBase;

namespace VExtractor.Models.DataBase
{
    public partial interface IVDataBaseProcedures
    {
        Task<int> cleanupEventLogAsync(byte? CompanyId, int? DeviceId, int? DatapointId, int? EventTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ConstrainManagementResult>> ConstrainManagementAsync(long? type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> DeleteDevicePhysicalAsync(byte? CompanyId, int? DeviceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ecn_Clear_ExportTables_WithDeleteAsync(int? TableExtensionValueLimit, int? EventType, int? EventTypeGroup, byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ecn_Clear_ExportTables_WithTruncateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ecn_EnableDisable_Foreign_KeysResult>> ecn_EnableDisable_Foreign_KeysAsync(bool? enableKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ecn_Move_UserDataResult>> ecn_Move_UserDataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ecnsp_addTextResourceResult>> ecnsp_addTextResourceAsync(byte? CompanyId, int? CultureId, string Label, string Value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ecnsp_ClearExportTablesAsync(int? TableExtensionValueLimit, int? EventType, int? EventTypeGroup, byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ecnsp_CreateEventLogTemplateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ecnsp_CreateIndexesInEventLogTemplateResult>> ecnsp_CreateIndexesInEventLogTemplateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ecnsp_CreatePartTablesResult>> ecnsp_CreatePartTablesAsync(string Interval, byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ecnsp_InsertToPartTablesResult>> ecnsp_InsertToPartTablesAsync(byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ecnsp_RenameEventLogTemplateAsync(string Suffix, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getConverterInformationResult>> getConverterInformationAsync(int? DeviceId, string DPAddress, string EventAddress, int? EnumAddressValue, byte? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getStatusForCompanyResult>> getStatusForCompanyAsync(long? CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getStatusForDataPointResult>> getStatusForDataPointAsync(long? CompanyId, long? DataPointId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getStatusForDeviceResult>> getStatusForDeviceAsync(long? CompanyId, long? DeviceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getTANResult>> getTANAsync(string Name, long? CompanyId, OutputParameter<long?> NewId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<getTANsResult>> getTANsAsync(string Name, long? CompanyId, int? Counter, OutputParameter<long?> NewId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_vsmST_CleanupTablesResult>> sp_vsmST_CleanupTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_vsmST_CreateTablesResult>> sp_vsmST_CreateTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_vsmST_DropTablesResult>> sp_vsmST_DropTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<sp_vsmUpdateSalesOrgAndCultureResult>> sp_vsmUpdateSalesOrgAndCultureAsync(byte? CompanyId, int? UserId, string VkOrg, int? CultureId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<WriteControlLogResult>> WriteControlLogAsync(long? Id, byte? CompanyId, int? EventTypeId, int? EventValueTypeId, double? EventValue_Float, int? EventValue_Int, string EventValue_VarChar, string EventValue_NText, bool? EventValue_Bit, byte[] EventValue_Binary, DateTime? EventValue_DateTime, string Unit, string DataType, int? DeviceId, int? DataPointId, int? ControlPriority, int? StatusTypeId, DateTime? ControlTimePlanned, long? ControlLogDataGroupId, int? SendingState, int? UserIdCreated, int? UserIdModified, DateTime? ControlSentTime, string ErrorText, OutputParameter<long?> NewControlLogId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<WriteEventLogResult>> WriteEventLogAsync(byte? CompanyId, int? EventTypeId, int? EventValueTypeId, double? EventValue_Float, int? EventValue_Int, string EventValue_VarChar, string EventValue_NText, bool? EventValue_Bit, byte[] EventValue_Binary, DateTime? EventValue_DateTime, string Unit, string DataType, int? DeviceId, int? DataPointId, DateTime? EventTime, int? EventPriority, int? StatusTypeId, long? EventLogDataGroupId, OutputParameter<long?> NewEventLogId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> WriteEventLogCurrentEventAsync(byte? CompanyId, int? EventTypeId, int? EventLogId, int? DeviceId, int? DataPointId, DateTime? EventTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
    }
}
